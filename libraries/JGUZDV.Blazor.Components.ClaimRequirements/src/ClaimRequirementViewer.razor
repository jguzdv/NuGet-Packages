@using JGUZDV.Extensions.Authorization;

@if (ClaimRequirement != null)
{
    @if (ClaimRequirement is ClaimValueRequirement cvr)
    {
        <div class="ps-3">
            @LR["ClaimsRequirement.ClaimType"]: @cvr.ClaimType - @WriteComparison(cvr.ClaimTypeComparison)
        </div>
        <div class="ps-3">
            @LR["ClaimsRequirement.ClaimValue"]: @cvr.ClaimValue - @WriteComparison(cvr.ClaimValueComparison)
        </div>
    }

    @if (ClaimRequirement is NullRequirement nr)
    {
        <div>
            @LR["Viewer.ClaimUndefined"]
        </div>
    }

    @if (ClaimRequirement is ClaimRequirementCollection crc)
    {
        @for (int i = 0; i < crc.Requirements.Count; i++)
        {
            <div class="ps-3 border-start">
                <ClaimRequirementViewer ClaimRequirement="crc.Requirements[i]" />
            </div>
            @if (crc.MatchType == RequirementCollectionMatchType.MatchAll && i != crc.Requirements.Count - 1)
            {
                <div>
                    @LR["Viewer.And"]
                </div>
            }
            @if (crc.MatchType == RequirementCollectionMatchType.MatchAny && i != crc.Requirements.Count - 1)
            {
                <div>
                    @LR["Viewer.Or"]
                </div>
            }
        }
    }
}

@* @if (ClaimRequirement != null)
{
    <div class="mb-3">
        <div class="inline-block mb-3 mt-1">
            <span class="px-3">@LR["Viewer.ComparisonTypes"]: CI = Case insensitive, CS = Case sensitive</span>
        </div>
        @if (ClaimRequirement is ClaimValueRequirement cvr)
        {
            <div class="inline-block">
                <div class="">
                    <span class="px-3">{ @LR["ClaimRequirement.ClaimType"]: @cvr.ClaimType (@WriteComparison(cvr.ClaimTypeComparison)), @LR["ClaimRequirement.ClaimValue"]: @cvr.ClaimValue (@WriteComparison(cvr.ClaimValueComparison)) }</span>
                </div>
            </div>
        }
    </div>
} *@

@code {
    [Parameter, EditorRequired]
    public ClaimRequirement? ClaimRequirement { get; set; }

    private string WriteComparison(StringComparison stringComparison)
     => stringComparison switch
     {
         StringComparison.OrdinalIgnoreCase => "CI",
         StringComparison.Ordinal => "CS",
         _ => "k/a"
     };

}
