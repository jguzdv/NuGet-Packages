@using JGUZDV.JobHost.Dashboard.Model
@using JGUZDV.JobHost.Dashboard.Services

@if (_jobs != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Status</th>
                <th>Name</th>
                <th>Host</th>
                <th>Last executed</th>
                <th>Schedule</th>
                <th>Execute now</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in JobSort(_jobs.JobsByHost.SelectMany(x => x.Value).ToList()))
            {
                <tr>
                    <td>
                        <i class="fa @(item.LastResult == "error" ? "fa-times-circle text-danger" : "fa-check-circle text-success")"></i>
                    </td>
                    <td>
                        @item.Name
                    </td>
                    <td>
                        @_jobs.Hosts[item.HostId].Name
                    </td>
                    <td>
                        @item.LastExecutedAt.ToLocalTime().ToString("g")
                    </td>
                    <td>
                        @item.Schedule
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => ExecuteNow(item)">trigger now</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    public required IDashboardService Service { get; set; }

    [Parameter]
    public Func<List<Job>, List<Job>> JobSort { get; set; } = x => x.OrderBy(x => x.Name).ToList();

    private JobCollection? _jobs;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _jobs = await Service.GetSteveJobs();
    }

    private async Task ExecuteNow(Job job)
    {
        await Service.ExecuteNow(job.Id);
    }
}
