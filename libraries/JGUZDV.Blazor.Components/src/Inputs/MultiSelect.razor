@typeparam T
@typeparam TKey

@using Microsoft.AspNetCore.Components.Web;
@using JGUZDV.Blazor.Components.Extensions;

<div class="@(HostClass == null ? "px-2 py-1 border" : $"{HostClass}")">
    <div @ref="_anchor" class="d-flex justify-content-between clickable" role="button" tabindex="0" @onkeypress="e => e.OnEnter(ToggleSelection)" @onclick="ToggleSelection">
        <div class="d-flex flex-nowrap overflow-hidden text-nowrap text-truncate">
            <span class="me-1">@Title </span>
            @if (!UseSingleSelectionMode && Values!.Any() && !_isOpen)
            {
                <span class="text-muted small text-truncate align-self-center" title="@(Values!.Select(x => ItemName(x)).Aggregate((a,b) => $"{a}, {b}"))">
                    <span> (@Values!.Select(x => ItemName(x)).Aggregate((a, b) => $"{a}, {b}"))</span>
                </span>
            }
            else if (Value != null && UseSingleSelectionMode)
            {
                <span class="text-muted small text-truncate align-self-center" title="@ItemName(Value)">
                    <span> (@ItemTemplate(Value))</span>
                </span>
            }
        </div>
        <div class="ms-1">
            @if (_isOpen)
            {
                @CloseIcon("align-self-center")
            }
            else
            {
                @OpenIcon("align-self-center")
            }
        </div>
    </div>

    @if (!UseSingleSelectionMode && Values!.Any() && _isOpen)
    {
        <div class="d-flex gap-2 flex-wrap my-3">
            @foreach (var item in Values!)
            {
                <span class="badge button text-bg-secondary" tabindex="0"
                      @onkeypress="e => e.OnEnter(() => HandleBadgeClick(item))"
                      @onclick="() => HandleBadgeClick(item)">
                    @ItemName(item) @BadgeIcon("")
                </span>
            }
        </div>
    }

    @if (_isOpen)
    {
        <div class="fade-in my-3">
            @{
#pragma warning disable 8601 // warning is wrong
            }
            <MultiSelectBody Items="@Items"
                             Values="@Values"
                             ValuesChanged="@ValuesChanged"
                             Value="@Value"
                             ValueChanged="@ValueChanged"
                             FilterLabel="@FilterLabel"
                             Filter="@Filter"
                             ItemsContainerClass="@ItemsContainerClass"
                             ItemKey="@ItemKey"
                             ItemTemplate="@ItemTemplate"
                             AllOptionLabel="@AllOptionLabel"
                             UseSingleSelectionMode="@UseSingleSelectionMode"
                             T="T"
                             TKey="TKey">
            </MultiSelectBody>
            @{
#pragma warning restore
            }
        </div>
        <div role="button" tabindex="0" @onclick="ToggleSelection" @onkeypress="e => e.OnEnter(ToggleSelection)">
            @CloseButton
        </div>
    }
</div>
@code {

    /// <summary>
    /// The selectable items
    /// </summary>
    [Parameter]
    [EditorRequired]
    public List<T> Items { get; set; } = default!;

    /// <summary>
    /// Item view template
    /// </summary>
    [Parameter]
    [NotNull]
    public RenderFragment<T>? ItemTemplate { get; set; } = default!;

    /// <summary>
    /// Name selector
    /// </summary>
    [Parameter]
    [EditorRequired]
    public Func<T, string> ItemName { get; set; } = default!;

    /// <summary>
    /// Key selector
    /// </summary>
    [Parameter]
    [EditorRequired]
    public Func<T?, TKey> ItemKey { get; set; } = default!;

    /// <summary>
    /// The selected values.
    /// </summary>
    [Parameter]
    public List<T>? Values { get; set; } = default!;

    /// <summary>
    /// Change EventCallback for <see cref="Values"/>
    /// </summary>
    [Parameter]
    public EventCallback<List<T>> ValuesChanged { get; set; }

    /// <summary>
    /// The selected value.
    /// </summary>
    [Parameter]
    public T? Value { get; set; } = default!;

    /// <summary>
    /// Change EventCallback for <see cref="Value"/>
    /// </summary>
    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    /// <summary>
    /// The title (label) of the multi select
    /// </summary>
    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = default!;

    /// <summary>
    /// If set enables "select all" functionality and will be used as the label
    /// </summary>
    [Parameter]
    public string? AllOptionLabel { get; set; }

    /// <summary>
    /// css class of the host (containing element)
    /// </summary>
    [Parameter]
    public string? HostClass { get; set; }

    /// <summary>
    /// If set enables "filter" functionality and will be used as the placeholder
    /// </summary>
    [Parameter]
    public string? FilterLabel { get; set; }

    /// <summary>
    /// icon for the "filter" functionality
    /// </summary>
    [Parameter]
    public RenderFragment<string?> FilterIcon { get; set; } = Icons.Filter;

    /// <summary>
    /// The filter for the "filter" functionality
    /// </summary>
    [Parameter]
    public Func<(T item, string query), bool>? Filter { get; set; }

    /// <summary>
    /// css class of the items container
    /// </summary>
    [Parameter]
    public string? ItemsContainerClass { get; set; } = "row row-cols-1";

    /// <summary>
    /// Enables single selection mode, i.e. <see cref="Value"/> will be used instead of <see cref="Values"/>
    /// </summary>
    [Parameter]
    public bool UseSingleSelectionMode { get; set; }

    /// <summary>
    /// Render fragment of the close button
    /// </summary>
    [Parameter]
    public RenderFragment CloseButton { get; set; } =
        @<div class="btn btn-outline-secondary w-100">
            @Icons.Collapsed("")
        </div>
    ;

    /// <summary>
    /// Close icon for the header
    /// </summary>
    [Parameter]
    public RenderFragment<string?> CloseIcon { get; set; } = Icons.Collapsed;

    /// <summary>
    /// Open icon for the header
    /// </summary>
    [Parameter]
    public RenderFragment<string?> OpenIcon { get; set; } = Icons.Collapsible;

    /// <summary>
    /// Icon for badge remove
    /// </summary>
    [Parameter]
    public RenderFragment<string?> BadgeIcon { get; set; } = Icons.RemoveCircle;

    private bool _isOpen;

    private ElementReference _anchor;


    /// <inheritdoc/>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (FilterLabel != null && Filter == null)
            Filter = x => ItemName(x.item).Contains(x.query, StringComparison.OrdinalIgnoreCase);

        if (ItemTemplate == null)
            ItemTemplate = x => @<span>@ItemName(x)</span>;

        if (!UseSingleSelectionMode && Values == null)
            throw new InvalidOperationException($"Parameter {nameof(Values)} may not be null if multiple values are allowed");

        if (UseSingleSelectionMode && Values != null)
            throw new InvalidOperationException($"Parameter {nameof(Values)} may not be set if only one value is allowed");
    }

    private void ToggleSelection()
    {
        _isOpen = !_isOpen;
        if (!_isOpen)
            _anchor.FocusAsync();
    }

    private void HandleBadgeClick(T item)
    {
        Values = Values?.Where(x => !ItemKey(x)!.Equals(ItemKey(item))).ToList();
        ValuesChanged.InvokeAsync(Values);
    }
}
