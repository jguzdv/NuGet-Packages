@typeparam T
@typeparam TKey

@using JGUZDV.Blazor.Components.Util;
@using JGUZDV.Blazor.Components.Extensions;
@using Microsoft.AspNetCore.Components.Web;

@if (Filter != null)
{
    <div class="mb-3 position-relative">
        @FilterIcon("position-absolute top-50 translate-middle-y ps-2")
        <input class="form-control filter-input" placeholder="@FilterLabel" @bind="_filter" @bind:event="oninput" />
    </div>
}

<div class="@ItemsContainerClass g-2">
    @if (!string.IsNullOrWhiteSpace(AllOptionLabel) && string.IsNullOrWhiteSpace(_filter) && !UseSingleSelectionMode)
    {
        <div class="col-12">
            @{
                var selectedClass = (Values.Count == Items.Count) ?
                "border-success text-success"
                : "";
            }
            <div @onkeypress="e => e.OnEnter(ToggleAll)" @onclick="ToggleAll"
                 tabindex="0"
                 class="bg-body button border p-2 small d-flex justify-content-between @selectedClass">
                <span class="text-truncate" title="@AllOptionLabel">@AllOptionLabel</span>
                @if (Values.Count == Items.Count)
                {
                    @Icons.Check("align-self-center")
                }
            </div>
        </div>
    }
    @foreach (var item in Items.Where(x => Filter == null || string.IsNullOrWhiteSpace(_filter) || Filter((x, _filter))))
    {
        <div class="col">
            @{
                var isSelected = ((!UseSingleSelectionMode && Values.Any(x => ItemKey(x)!.Equals(ItemKey(item))))
                || UseSingleSelectionMode && ItemKey(item)!.Equals(ItemKey(Value)));
                var selectedClass = isSelected
                ? "border-success text-success "
                : "";
            }
            <div tabindex="0"
                 @onkeypress="e => e.OnEnter(() => HandleItemClicked(item))" @onclick="() => HandleItemClicked(item)"
                 class="border bg-body button p-2 small d-flex justify-content-between @selectedClass">
                <span class="text-truncate">@ItemTemplate(item)</span>
                @if (isSelected)
                {
                    @Icons.Check("align-self-center")
                }
            </div>
        </div>
    }
</div>
@code {

    /// <summary>
    /// The list of items to display in the selection list.
    /// </summary>
    [Parameter, EditorRequired]
    public List<T> Items { get; set; } = default!;

    /// <summary>
    /// Template for rendering each item in the list.
    /// </summary>
    [Parameter, EditorRequired]
    public RenderFragment<T> ItemTemplate { get; set; } = default!;

    /// <summary>
    /// Function to get the unique key for an item.
    /// </summary>
    [Parameter, EditorRequired]
    public Func<T?, TKey> ItemKey { get; set; } = default!;
    
    /// <summary>
    /// The currently selected value (for single selection mode).
    /// </summary>
    [Parameter]
    public T? Value { get; set; } = default!;

    /// <summary>
    /// The currently selected values (for multi-selection mode).
    /// </summary>
    [Parameter, EditorRequired]
    public List<T> Values { get; set; } = default!;

    /// <summary>
    /// Event callback triggered when the selected value changes.
    /// </summary>
    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    /// <summary>
    /// Event callback triggered when the selected values change.
    /// </summary>
    [Parameter]
    public EventCallback<List<T>> ValuesChanged { get; set; }

    /// <summary>
    /// The label for the 'select all' option.
    /// </summary>
    [Parameter]
    public string? AllOptionLabel { get; set; }

    /// <summary>
    /// The label for the filter input.
    /// </summary>
    [Parameter]
    public string? FilterLabel { get; set; }

    /// <summary>
    /// The icon to display in the filter input.
    /// </summary>
    [Parameter]
    public RenderFragment<string?> FilterIcon { get; set; } = Icons.Filter;

    /// <summary>
    /// Function to filter items based on a query string.
    /// </summary>
    [Parameter]
    public Func<(T item, string query), bool>? Filter { get; set; }

    /// <summary>
    /// The CSS class for the items container.
    /// </summary>
    [Parameter]
    public string? ItemsContainerClass { get; set; } = "row row-cols-1";

    /// <summary>
    /// If true, enables single selection mode; otherwise, multi-selection is enabled.
    /// </summary>
    [Parameter]
    public bool UseSingleSelectionMode { get; set; }

    private string? _filter;


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (!UseSingleSelectionMode && Values == null)
            throw new InvalidOperationException($"Parameter {nameof(Values)} may not be null if multipe values are allowed");

        if (UseSingleSelectionMode && Values != null)
            throw new InvalidOperationException($"Parameter {nameof(Values)} may not be set if only one value is allowed");

        if (FilterLabel != null && Filter == null)
            throw new InvalidOperationException($"{nameof(Filter)} must be set to use filtering");
    }


    private async Task HandleItemClicked(T item)
    {
        if (UseSingleSelectionMode)
        {
            Value = item;
            await ValueChanged.InvokeAsync(item);
            return;
        }

        if (Values.Any(x => ItemKey(x)!.Equals(ItemKey(item))))
        {
            Values = Values.Where(x => !ItemKey(x)!.Equals(ItemKey(item))).ToList();
            await ValuesChanged.InvokeAsync(Values);
        }
        else
        {
            Values = Values.Append(item).ToList();
            await ValuesChanged.InvokeAsync(Values);
        }
    }


    private async Task ToggleAll()
    {
        if (Values.Count == Items.Count)
        {
            Values = new List<T>();
            await ValuesChanged.InvokeAsync(Values);
        }
        else
        {
            Values = Items.Union(Values).ToList();
            await ValuesChanged.InvokeAsync(Values);
        }
    }
}
