@typeparam T
@typeparam TKey

@using Microsoft.AspNetCore.Components.Web;

@if (!string.IsNullOrWhiteSpace(FilterLabel))
{
    <div class="mt-2 position-relative">
        <i class="position-absolute top-50 translate-middle-y ps-2 fa fa-search"></i>
        <input class="form-control" style="padding-left: 2rem;" placeholder="@FilterLabel" @bind="_filter" @bind:event="oninput" />
    </div>
}

@if (!string.IsNullOrWhiteSpace(AllOptionLabel) && string.IsNullOrWhiteSpace(_filter) && !IsSingle)
{
    <div class="my-2" style="cursor:pointer" @onclick="HandleAllClicked">
        @if (Values.Count == Items.Count)
        {
            <div class="border p-2 small border-success text-nowrap text-success d-flex justify-content-between">
                <span>@AllOptionLabel</span>
                <i class="fa fa-fw fa-check align-self-center"></i>
            </div>
        }
        else
        {
            <div class="border p-2 small">
                @AllOptionLabel
            </div>
        }
    </div>
}

<div class="row @RowCols mt-2">
    @foreach (var item in Items.Where(x => string.IsNullOrWhiteSpace(_filter)
    || ItemName(x).Contains(_filter, StringComparison.OrdinalIgnoreCase)))
    {
        <div class="mb-2" style="cursor:pointer" @onclick="() => HandleItemClicked(item)">
            @if ((!IsSingle && Values.Any(x => ItemKey(x).Equals(ItemKey(item))))
           || IsSingle && ItemKey(item).Equals(ItemKey(Value)))
            {
                <div class="border p-2 small border-success text-nowrap text-success d-flex justify-content-between">
                    <span>@ItemName(item)</span>
                    <i class="fa fa-fw fa-check align-self-center"></i>
                </div>
            }
            else
            {
                <div class="border p-2 small">
                    @ItemName(item)
                </div>
            }
        </div>
    }
</div>
@code {

    [Parameter]
    [EditorRequired]
    public List<T> Items { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Func<T?, string> ItemName { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Func<T?, TKey> ItemKey { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<T> Values { get; set; } = default!;

    [Parameter]
    public EventCallback<List<T>> ValuesChanged { get; set; }

    [Parameter]
    public T? Value { get; set; } = default!;

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public string? AllOptionLabel { get; set; }

    [Parameter]
    public string? FilterLabel { get; set; }

    [Parameter]
    public string? RowCols { get; set; } = "row-cols-1";

    [Parameter]
    public bool IsSingle { get; set; }

    private string? _filter;


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Value != null && Values != null)
            throw new InvalidOperationException("Single and Multiple does not work simultaneously");

        if (!IsSingle && Values == null)
            throw new InvalidOperationException($"Parameter {nameof(Values)} may not be null if multipe values are allowed");

        if (IsSingle && Values != null)
            throw new InvalidOperationException($"Parameter {nameof(Values)} may not be set if only one value is allowed");
    }

    private async Task HandleItemClicked(T item)
    {
        if (IsSingle)
        {
            Value = item;
            await ValueChanged.InvokeAsync(item);
            return;
        }


        if (Values.Any(x => ItemKey(x).Equals(ItemKey(item))))
        {
            Values = Values.Where(x => !ItemKey(x).Equals(ItemKey(item))).ToList();
            await ValuesChanged.InvokeAsync(Values);
        }
        else
        {
            Values = Values.Append(item).ToList();
            await ValuesChanged.InvokeAsync(Values);
        }
    }

    private async Task HandleAllClicked()
    {
        if (Values.Count == Items.Count)
        {
            Values = new List<T>();
            await ValuesChanged.InvokeAsync(Values);
        }
        else
        {
            Values = Items.Union(Values).ToList();
            await ValuesChanged.InvokeAsync(Values);
        }
    }
}
