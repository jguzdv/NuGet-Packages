@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop

@typeparam TModel where TModel : class

<dialog id="@_componentId" class="p-0 border-0">
    <div class="modal show d-block">
        @if (_renderFragment != null && _context != null)
        {
            @_renderFragment(_context)
        }
    </div>
</dialog>


@code {
    [Inject, NotNull]
    private IJSRuntime? JSRuntime { get; set; }
    private IJSObjectReference? _jsModule;

    private readonly string _componentId = Guid.NewGuid().ToString();
    protected TaskCompletionSource<ModalResult> _taskCompletionSource = new();

    private RenderFragment<ModalContext>? _renderFragment;
    private ModalContext? _context;

    [Parameter]
    public RenderFragment<ModalContext>? ChildContent { get; set; }

    [Parameter]
    public RenderFragment<ModalContext>? Content { get; set; }

    [Parameter]
    public RenderFragment<ModalContext>? Header { get; set; }
    [Parameter]
    public RenderFragment<ModalContext>? Body { get; set; }
    [Parameter]
    public RenderFragment<ModalContext>? Footer { get; set; }


    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? ModalDialogClasses { get; set; }
    [Parameter]
    public string? ModalHeaderClasses { get; set; }
    [Parameter]
    public string? ModalBodyClasses { get; set; }
    [Parameter]
    public string? ModalFooterClasses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/JGUZDV.Blazor.Components/js/Modal.js").AsTask();
        var reference = DotNetObjectReference.Create(this);
        _ = _jsModule.InvokeVoidAsync("EscapeListener", _componentId, reference);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
   
        if (Title != null && Header != null)
            throw new InvalidOperationException($"{nameof(Title)} cannot be set, if {nameof(Header)} is set.");

        if ((Title != null || Header != null || Footer != null) && Body == null)
            throw new InvalidOperationException($"{nameof(Header)}, {nameof(Title)} or {nameof(Footer)} may only be set together with {nameof(Body)}");

        if (Body != null && Content != null)
            throw new InvalidOperationException($"{nameof(Body)} may not be set, if {nameof(Content)} is set.");

        RenderFragment<ModalContext>? content = Body == null
            ? Content
            : (ctx) =>
                @<div class="modal-content">
                    @if (Header != null || Title != null)
                    {
                        <div class="modal-header @ModalHeaderClasses">
                        @if (Header != null)
                        {
                            @Header.Invoke(ctx)
                        }
                        else
                        {
                            <h5 class="modal-title">@Title</h5>
                            <button type="button" class="btn-close" aria-label="Close" @onclick="() => Close()"></button>
                        }
                        </div>
                    }

                    <div class="modal-body @ModalBodyClasses">
                        @Body.Invoke(ctx)
                    </div>

                    @if (Footer != null)
                    {
                        <div class="modal-footer @ModalFooterClasses">
                            @Footer.Invoke(ctx)
                        </div>
                    }
                </div>;

        if (content != null && ChildContent != null)
            throw new InvalidOperationException($"{nameof(Content)} may not be set, if {nameof(ChildContent)} is set.");

        _renderFragment = content == null
            ? ChildContent
            : (ctx) =>
                @<div class="modal-dialog @ModalDialogClasses" @onclick:stopPropagation="true">
                    @content.Invoke(ctx)
                </div>;
    }

    public Task<ModalResult> ShowModal(TModel model)
    {
        _context = new ModalContext(this, model);
        StateHasChanged();

        _ = _jsModule!.InvokeVoidAsync("OpenDialog", _componentId);

        _taskCompletionSource = new();
        return _taskCompletionSource.Task;
    }

    public void Close(ModalResult result)
    {
        _ = _jsModule!.InvokeVoidAsync("CloseDialog", _componentId);
        _taskCompletionSource.SetResult(result);
    }

    [JSInvokable]
    public void Close()
        => Close(ModalResult.Undefined);

    public void Accept()
        => Close(ModalResult.Accepted);

    public void Dismiss()
        => Close(ModalResult.Dismissed);

    public class ModalContext
    {
        [SetsRequiredMembers]
        public ModalContext(Modal<TModel> modal, TModel model)
        {
            Modal = modal;
            Model = model;
        }

        public Modal<TModel> Modal { get; }

        public TModel Model { get; set; }
    }
}
