@inject ModalService _modalService

@foreach (var modal in _modalService.Modals)
{
    <div @key="modal" class="modal fade @ModalShowClass @( modal == Current ? "" : "d-none")" style="@ModalStyle" tabindex="-1" aria-modal="true" role="dialog">
        @modal.ChildContent
    </div>
}


@if (Current != null)
{
    <div class="modal-backdrop fade @ModalShowClass" @onclick="() => Current.Dismiss()"></div>
}


@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _modalService.ModalChanged += (_, c) =>
        {
            Current = c;
            InvokeAsync(StateHasChanged);

            Task.Delay(10).ContinueWith((t) =>
            {
                IsShowing = Current != null;
                InvokeAsync(StateHasChanged);
            });
        };
    }

    public IModal? Current { get; set; }

    public bool IsShowing { get; set; }

    public string? ModalShowClass => IsShowing ? "show" : null;
    public string? ModalStyle => IsShowing ? "display: block" : null;
}