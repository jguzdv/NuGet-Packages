<div id="@EffectiveComponentId" popover="manual" class="toast-container position-fixed bottom-0 end-0 p-0 m-3">
    @foreach (var toast in Toasts)
    {
        <ToastMessageView Toast="@toast" OnDismiss="() => DismissToast(toast)" />
    }
</div>

@inject IJSRuntime JSRuntime

@code {
    private IList<ToastMessage> Toasts { get; set; } = [];
    private IJSObjectReference? _jsModule;

    /// <summary>
    /// Used to override the id of the component. Useful when multiple toast message components are used.
    /// </summary>
    [Parameter]
    public string? ComponentId { get; set; }

    private string EffectiveComponentId => ComponentId ?? "JGUZDV.Blazor.Components.ToastMessages";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/JGUZDV.Blazor.Components/Toasts/ToastMessages.js");
        }
    }

    /// <summary>
    /// Dissmisses the toast message.
    /// </summary>
    public void DismissToast(ToastMessage toast)
    {
        Toasts.Remove(toast);
        if (Toasts.Count == 0 && _jsModule is not null)
        {
            _ = _jsModule.InvokeVoidAsync("hideToastContainer", EffectiveComponentId);
        }

        StateHasChanged();
    }

    /// <summary>
    /// Creates and shows a new toast message from the parameters
    /// </summary>
    public ToastMessage Show(ToastLevel toastLevel, string message, string? title)
    {
        var toastMessage = new ToastMessage(toastLevel, message, title);
        Show(toastMessage);

        return toastMessage;
    }

    /// <summary>
    /// Shows the given toast message.
    /// </summary>
    public void Show(ToastMessage toast)
    {
        Toasts.Add(toast);
        if (_jsModule is not null)
        {
            _ = _jsModule.InvokeVoidAsync("showToastContainer", EffectiveComponentId);
        }
        StateHasChanged();
    }
}