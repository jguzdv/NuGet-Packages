@using JGUZDV.Blazor.Components;
@using JGUZDV.Blazor.Components.Authentication;
@using JGUZDV.Blazor.Components.Localization;
@using Microsoft.AspNetCore.Components.Routing

@inject NavigationManager NavManager

<header class="jbs-header bg-body @AdditonalClasses">
    <div class="header-grid">
        @if (Logo != null)
        {
            <div class="header-logo">
                <a href="@(Logo.Href ?? "")">
                    <img class="app-logo" src="@Logo.SrcUrl" alt="@Logo.AltText" />
                </a>
            </div>
        }

        <h1 class="header-app-title">@Title</h1>

        @if (ChildContent != null)
        {
            <div class="header-content">
                @ChildContent
            </div>
        }

        @if (ShowButtons)
        {
            <div class="header-controls">
                @if (ShowLoginButton)
                {
                    <LoginButton />
                }

                @if (ShowLanguageSelector)
                {
                    <LanguageSelect />
                }

                @if (ShowDarkModeSelector)
                {
                    <DarkModeSelector />
                }

                @if (HelpUrl != null)
                {
                    <a aria-label="@LR["Help"]" class="jgu_btn btn btn-none" target="_blank" href="@HelpUrl">
                        @Icons.Help(null)
                    </a>
                }

                @if (ShowAppSwitch)
                {
                    <button class="jgu_btn btn btn-none">
                        @Icons.AppSelect(null)
                    </button>
                }

                @if (ShowSidebarToggle)
                {
                    <label for="jbs-sidebar-toggle" class="jgu_btn btn btn-none d-lg-none">
                        @Icons.Menu(null)
                    </label>
                }
            </div>
        }

        @if (NavigationContent != null && NavigationContent.Any())
        {
            <nav class="header-navigation" aria-label="Navigation">
                @foreach (var navItem in NavigationContent)
                {
                    @if (navItem.HasChildren)
                    {
                        <Dropdown>
                            <DropdownLabelContent>
                                <div class="header-navigation-link @(HasActiveChild(navItem.Children!) ? "active" : "") dropdown-toggle" id="@navItem.Name" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    @if (navItem.Icon != null)
                                    {
                                        @navItem.Icon
                                    }
                                    @navItem.Name
                                </div>
                            </DropdownLabelContent>
                            <DropdownContent>
                                <div class="header-navigation-dropdown">
                                    @foreach (var child in navItem.Children!)
                                    {
                                        <NavLink class="dropdown-item" href="@child.NavUrl" Match="@child.Match">
                                            @if (child.Icon != null)
                                            {
                                                @child.Icon
                                            }
                                            @child.Name
                                        </NavLink>
                                    }
                                </div>
                            </DropdownContent>
                        </Dropdown>
                    }
                    else
                    {
                        <NavLink class="header-navigation-link" href="@navItem.NavUrl" Match="@navItem.Match">
                            @if (navItem.Icon != null)
                            {
                                @navItem.Icon
                            }
                            @navItem.Name
                        </NavLink>
                    }
                }
            </nav>
        }

    </div>
</header>

@code {
    [Inject, NotNull]
    private IStringLocalizer<ComponentStrings>? LR { get; set; }


    [Parameter, EditorRequired]
    public required string Title { get; set; }

    [Parameter]
    public LogoSpecs? Logo { get; set; }


    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    [Parameter]
    public bool ShowLoginButton { get; set; } = true;

    [Parameter]
    public bool ShowLanguageSelector { get; set; } = true;

    [Parameter]
    public bool ShowAppSwitch { get; set; } = false;

    [Parameter]
    public bool ShowDarkModeSelector { get; set; } = false;

    [Parameter]
    public bool ShowSidebarToggle { get; set; } = true;

    [Parameter]
    public string? HelpUrl { get; set; }

    [Parameter]
    public List<NavigationSpecs>? NavigationContent { get; set; }


    public bool ShowButtons =>
        ShowLoginButton ||
        ShowLanguageSelector ||
        ShowSidebarToggle ||
        ShowAppSwitch ||
        HelpUrl != null ||
        ShowDarkModeSelector
        ;


    [Parameter]
    public string? AdditonalClasses { get; set; }


    public class LogoSpecs
    {
        public required string SrcUrl { get; set; }
        public required string AltText { get; set; }
        public string? Href { get; set; }
    }

    public class NavigationSpecs
    {
        public RenderFragment? Icon { get; set; }
        public string? NavUrl { get; set; }
        public required string Name { get; set; }
        public NavLinkMatch Match { get; set; } = NavLinkMatch.Prefix;

        public List<NavigationSpecs>? Children { get; set; }

        public bool HasChildren => Children != null && Children.Any();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (NavigationContent != null)
        {
            foreach (var item in NavigationContent)
            {
                if (!string.IsNullOrWhiteSpace(item.NavUrl) && item.HasChildren)
                {
                    throw new InvalidOperationException($"Ein Navigationseintrag darf entweder eine URL oder Children besitzen, aber nicht beides. Fehler bei: '{item.Name}'");
                }
            }
        }
    }

    public bool HasActiveChild(List<NavigationSpecs> children)
    {
        var uri = new Uri(NavManager.Uri);
        var path = uri.AbsolutePath;

        return children.Any(child =>
            child.NavUrl != null &&
            (child.Match == NavLinkMatch.All
                ? path.Equals(child.NavUrl, StringComparison.OrdinalIgnoreCase)
                : path != null && path.StartsWith(child.NavUrl, StringComparison.OrdinalIgnoreCase))
        );
    }
}