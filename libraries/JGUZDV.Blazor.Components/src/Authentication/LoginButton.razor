@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.Extensions.Localization;
@using Microsoft.JSInterop

@inject NavigationManager _navigation
@inject IStringLocalizer<Resources.ComponentStrings> LR
@inject IJSRuntime JSRuntime

@{
    var redirectUri = Uri.EscapeDataString(RedirectUrl ?? _navigation.ToAbsoluteUri(_navigation.Uri).PathAndQuery);
    var logoutRedirectUri = Uri.EscapeDataString(PostLogoutRedirectUrl ?? RedirectUrl ?? _navigation.ToAbsoluteUri(_navigation.Uri).PathAndQuery);

    if (!redirectUri.StartsWith("%2f", StringComparison.OrdinalIgnoreCase))
        redirectUri = "%2f" + redirectUri;

    if (!logoutRedirectUri.StartsWith("%2f", StringComparison.OrdinalIgnoreCase))
        logoutRedirectUri = "%2f" + logoutRedirectUri;
}

<AuthorizeView Context="context">
    <NotAuthorized>
        <a class="btn btn-light border login-button" href="@LoginUrl?redirectUri=@redirectUri" data-enhance-nav="false">
            <i class="fas fa-sign-in-alt"></i>
            <span class="d-none d-lg-inline">@LR["AuthView.LoginButton"]</span>
        </a>
    </NotAuthorized>
    <Authorized>
        @{
            var displayName = context.User.FindFirst("name")?.Value
                ?? context.User.FindFirst("zdv_upn")?.Value
                ?? context.User.FindFirst("sub")?.Value
                ?? context.User.Identity?.Name;

            var userInitial = displayName?.Substring(0,1) ?? "#";
        }
        <Dropdown DropDownMenuClass="dropdown-menu-end">
            <DropdownLabelContent>
                <span class="jgu_btn btn btn-light border">
                    <i class="fas fa-user-circle"></i>
                    <span class="d-none d-lg-inline-block ms-2">@displayName</span>
                </span>
            </DropdownLabelContent>
            <DropdownContent>
                <h6 class="dropdown-header d-lg-none">@displayName</h6>
                <a class="dropdown-item" href="@LogoutUrl?redirectUri=@logoutRedirectUri">
                    <i class="fas fa-sign-out-alt"></i>
                    @LR["AuthView.LogoutButton"]
                </a>
                @DropdownItems
            </DropdownContent>
        </Dropdown>
    </Authorized>
</AuthorizeView>

@code {
    private const string AutoLoginKey = "LoginButton.AutoLoginRan";

    [CascadingParameter, NotNull]
    Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    [Parameter]
    public string LoginUrl { get; set; } = "_app/sign-in";
    [Parameter]
    public string LogoutUrl { get; set; } = "_app/sign-out";

    [Parameter]
    public string? RedirectUrl { get; set; }

    [Parameter]
    public string? PostLogoutRedirectUrl { get; set; }

    [Parameter]
    public bool UseAutoLogin { get; set; }

    [Parameter]
    public RenderFragment? DropdownItems { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var redirectUri = Uri.EscapeDataString(RedirectUrl ?? _navigation.ToAbsoluteUri(_navigation.Uri).PathAndQuery);

        if (!redirectUri.StartsWith("/"))
            redirectUri = "/" + redirectUri;

        var authenticationState = await AuthenticationStateTask;

        if (UseAutoLogin && firstRender)
        {
            if (authenticationState.User.Identity?.IsAuthenticated != true)
            {
                var hasLoginBeenTried = await JSRuntime.InvokeAsync<string>("localStorage.getItem", AutoLoginKey);
                if (hasLoginBeenTried != "true")
                {
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", AutoLoginKey, true);

                    var uri = _navigation.ToAbsoluteUri($"{LoginUrl}?redirectUri={redirectUri}");
                    _navigation.NavigateTo(uri.ToString(), true);
                }
            }
            else
            {
                _ = JSRuntime.InvokeVoidAsync("localStorage.setItem", AutoLoginKey, false);
            }
        }
    }
}