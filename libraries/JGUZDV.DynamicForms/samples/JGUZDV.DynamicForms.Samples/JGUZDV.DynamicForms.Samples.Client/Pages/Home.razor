@page "/"
@using JGUZDV.Blazor.Components.Modals
@using JGUZDV.Blazor.Components.Toasts
@using JGUZDV.DynamicForms.Blazor
@using JGUZDV.DynamicForms.Blazor.FieldDefinitionComponents
@using JGUZDV.DynamicForms.Model
@using System.Text.Json
@using JGUZDV.DynamicForms.Serialization
@using JGUZDV.L10n
@using System.ComponentModel.DataAnnotations

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.


<ModalButton T="FieldDefinition">
    <Button>
        <div class="btn btn-primary " @onclick="() => context.ShowModal(new FieldDefinition())">
            new field def
        </div>
    </Button>
    <ModalBody>
        <FieldDefinitionForm @bind-FieldDefinition="context.Model"
                             @bind-FieldDefinition:after="() => {
                                                             _fieldDefinitions.Add(context.Model);
                             context.Modal.Accept();}"
                             SubmitLabel="Validieren">
            <FormSection Model="_myModel" >
                <div class="my-2">
                    <label> Name</label>
                    <input class="form-control" @bind-value="_myModel.Name" />
                </div>
            </FormSection>
        </FieldDefinitionForm>
    </ModalBody>

</ModalButton>


<Modal @ref="_editModal" TModel="FieldDefinition">
    <Body>
        <FieldDefinitionForm @bind-FieldDefinition="context.Model"
                             @bind-FieldDefinition:after="context.Modal.Accept">
        </FieldDefinitionForm>
    </Body>
</Modal>

<Modal @ref="_valueConfigModal" TModel="FieldDefinition">
    <Body>
        <ValueConfigurationForm @bind-FieldDefinition="context.Model"
                                @bind-FieldDefinition:after="context.Modal.Accept">
        </ValueConfigurationForm>
    </Body>
</Modal>

@foreach (var item in _fieldDefinitions)
{
    <div class="my-2">
        <div>
            <button class="btn btn-outline-secondary" @onclick="() => _editModal!.ShowModal(item)">
                edit
            </button>
            <button class="btn btn-outline-secondary" @onclick="() => _valueConfigModal!.ShowModal(item)">
                config values
            </button>
        </div>
        <span>
            @item.InputDefinition.Name (@item.Type!.DisplayName)
        </span>
    </div>
    <hr />
}

<button class="my-2 btn btn-primary" @onclick="Send">
    save
</button>

@code {

    [Inject]
    public required IServiceProvider ServiceProvider { get; set; }

    [Inject]
    public required IToastService Toasts { get; set; }

    [Inject]
    public required HttpClient Client { get; set; }

    private MyModel _myModel = new();

    private List<FieldDefinition> _fieldDefinitions = new();
    private Modal<FieldDefinition>? _editModal;
    private Modal<FieldDefinition>? _valueConfigModal;

    private async Task Send()
    {
        var options = new JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        };

        await Client.PostAsJsonAsync("https://localhost:7245/api/definitions/save", _fieldDefinitions, options);
    }


    public class MyModel : IValidatableObject
    {
        public string Name { get; set; } = "";
        public int Age { get; set; } = 18;
        public string Email { get; set; } = "";

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (Name!.Length < 3)
            {
                yield return new ValidationResult("Name must be at least 3 characters long.", new[] { nameof(Name) });
            }
        }
    }
}