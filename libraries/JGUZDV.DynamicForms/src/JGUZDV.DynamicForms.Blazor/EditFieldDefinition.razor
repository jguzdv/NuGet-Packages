@page "/edit-field-definition"
@using JGUZDV.Blazor.Components.L10n
@using JGUZDV.DynamicForms.Blazor.Resources
@using JGUZDV.DynamicForms.Model
@using JGUZDV.L10n

@inject NavigationManager Navigation
@inject IStringLocalizer<ComponentStrings> SL


<EditForm Model="@FieldDefinition" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label for="identifier">@SL["EditFieldDefinition.Identifier"]</label>
        <InputText id="identifier" @bind-Value="FieldDefinition.Identifier" class="form-control" />
    </div>

    <div class="mb-2">
        <label for="label">@SL["EditFieldDefinition.Label"]</label>
        <L10nEditor L10n="FieldDefinition.InputDefinition.Label" />
    </div>

    <div class="mb-2">
        <label for="name">@SL["EditFieldDefinition.Name"]</label>
        <InputText id="name" @bind-Value="FieldDefinition.InputDefinition.Name" class="form-control" />
    </div>

    <div class="mb-2">
        <label for="type">@SL["EditFieldDefinition.Type"]</label>
        <select id="type" 
            @bind="@FieldDefinition.InputDefinition.Type" 
            class="form-select">
            @foreach (var type in FieldType.KnownFieldTypes)
            {
                <option value="@type.ToJson()">@type.DisplayName</option>
            }
        </select>
    </div>

    <div class="mb-2">
        <label for="inputType">@SL["EditFieldDefinition.InputType"]</label>
        <InputText id="inputType" @bind-Value="FieldDefinition.InputDefinition.InputType" class="form-control" />
    </div>

    <div class="mb-2">
        <label for="description">@SL["EditFieldDefinition.Description"]</label>
        <L10nEditor L10n="FieldDefinition.Description" />
    </div class="mb-2">

    <div class="mb-2">
        <label for="isList">@SL["EditFieldDefinition.IsList"]</label>
        <InputCheckbox id="isList" @bind-Value="FieldDefinition.IsList" class="form-check-input" />
    </div>

    <div class="mb-2">
        <label for="sortKey">@SL["EditFieldDefinition.SortKey"]</label>
        <InputNumber id="sortKey" @bind-Value="FieldDefinition.SortKey" class="form-control" />
    </div>

    <div class="mb-2">
        <label for="isRequired">@SL["EditFieldDefinition.IsRequired"]</label>
        <InputCheckbox id="isRequired" @bind-Value="FieldDefinition.IsRequired" class="form-check-input" />
    </div>

    @*TODO: Modal for create and edit?*@
    <div class="mb-2">
        <label>@SL["EditFieldDefinition.ChoiceOptions"]</label>
        @foreach (var choice in FieldDefinition.ChoiceOptions)
        {
            <div class="mb-2">
                <label for="choiceValue">@SL["EditFieldDefinition.ChoiceValue"]</label>
                <InputText id="choiceValue" @bind-Value="choice.Value" class="form-control" />
                <label for="choiceName">@SL["EditFieldDefinition.ChoiceName"]</label>
                <L10nEditor L10n="choice.Name" />
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary">@SL["EditFieldDefinition.Save"]</button>
</EditForm>

@code {
    [Parameter]
    public required FieldDefinition FieldDefinition { get; set; }

    [Parameter]
    public EventCallback<FieldDefinition> FieldDefinitionChanged { get; set; }

    private void HandleValidSubmit()
    {
        FieldDefinitionChanged.InvokeAsync(FieldDefinition);
        // Handle the form submission, e.g., save the data
    }
}
