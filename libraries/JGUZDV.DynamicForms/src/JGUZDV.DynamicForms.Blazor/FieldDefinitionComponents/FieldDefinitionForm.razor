@page "/edit-field-definition"

@implements IDisposable

@using JGUZDV.Blazor.Components.L10n
@using JGUZDV.DynamicForms.Blazor.Resources
@using JGUZDV.DynamicForms.Model
@using JGUZDV.L10n
@using Microsoft.Extensions.DependencyInjection
@using System.ComponentModel.DataAnnotations

@inject NavigationManager Navigation
@inject IStringLocalizer<ComponentStrings> SL
@inject IServiceProvider ServiceProvider

<EditForm EditContext="_editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label for="identifier">@SL["EditFieldDefinition.Identifier"]</label>
        <InputText id="identifier" @bind-Value="_fieldDefinition.Identifier" class="form-control" />
    </div>

    <div class="mb-2">
        <label for="label">@SL["EditFieldDefinition.Label"]</label>
        <L10nEditor L10n="_fieldDefinition.InputDefinition.Label" />
    </div>

    <div class="mb-2">
        <label for="name">@SL["EditFieldDefinition.Name"]</label>
        <InputText id="name" @bind-Value="_fieldDefinition.InputDefinition.Name" class="form-control" />
    </div>

    <div class="mb-2">
        <label for="type">@SL["EditFieldDefinition.Type"]</label>
        <select id="type"
                value="@_fieldDefinition.Type?.ToJson()"
                @onchange="HandleTypeChanged"
                class="form-select">
            @if (_fieldDefinition.Type == null)
            {
                <option value="" selected>@SL["EditFieldDefinition.SelectType"]</option>
            }
            @foreach (var type in DynamicFormsConfiguration.KnownFieldTypes)
            {
                <option value="@type.ToJson()">@type.DisplayName</option>
            }
        </select>
    </div>

    @if (_metadataChoices != null)
    {
        <div class="mb-2">
            <label for="metadata">@_metadataLabel</label>
            <select id="metadata"
                    class="form-select"
                    @bind="_fieldDefinition.Metadata">
                @if (string.IsNullOrWhiteSpace(_fieldDefinition.Metadata))
                {
                    //TODO: Change key
                    <option value="" selected>@SL["EditFieldDefinition.SelectType"]</option>
                }
                @foreach (var choice in _metadataChoices)
                {
                    <option value="@choice.Value">@choice.Name</option>
                }
            </select>
        </div>
    }

    <div class="mb-2">
        <label for="description">@SL["EditFieldDefinition.Description"]</label>
        <L10nEditor L10n="_fieldDefinition.Description" />
    </div>

    <div class="mb-2 form-check">
        <InputCheckbox id="isList" @bind-Value="_fieldDefinition.IsList" class="form-check-input" />
        <label class="form-check-label" for="isList">@SL["EditFieldDefinition.IsList"]</label>
    </div>

    <div class="mb-2 form-check">
        <InputCheckbox class="form-check-input" id="isRequired" @bind-Value="_fieldDefinition.IsRequired" />
        <label class="form-check-label" for="isRequired">@SL["EditFieldDefinition.IsRequired"]</label>
    </div>

    <div class="mb-2">
        <label for="sortKey">@SL["EditFieldDefinition.SortKey"]</label>
        <InputNumber id="sortKey" @bind-Value="_fieldDefinition.SortKey" class="form-control" />
    </div>

    <CascadingValue Value="_messageStore">
        @ChildContent
    </CascadingValue>

    <ValidationSummary />

    <button type="submit"
            class="btn btn-primary">
        @(string.IsNullOrWhiteSpace(SubmitLabel)
                ? SL["EditFieldDefinition.Save"]
                : SubmitLabel)
    </button>
</EditForm>

@code {
    [Parameter]
    public required FieldDefinition FieldDefinition { get; set; }

    [Parameter]
    public EventCallback<FieldDefinition> FieldDefinitionChanged { get; set; }

    [Parameter]
    public string? SubmitLabel { get; set; }

    /// <summary>
    /// Use <see cref="FormSection" /> for seamless integration.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private EditContext? _editContext;
    private ValidationMessageStore? _messageStore;

    private List<ChoiceOption>? _metadataChoices = null;
    private string _metadataLabel = "";

    private FieldDefinition? _fieldDefinition;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        var newFieldDefinition = parameters.GetValueOrDefault<FieldDefinition>(nameof(FieldDefinition));

        if (newFieldDefinition != FieldDefinition)
        {
            if (_editContext != null)
                _editContext.OnValidationRequested -= HandleValidationRequested;

            _fieldDefinition = newFieldDefinition!.Copy();
            _editContext = new EditContext(_fieldDefinition!);
            _editContext.OnValidationRequested += HandleValidationRequested;
            _messageStore = new ValidationMessageStore(_editContext);
        }

        return base.SetParametersAsync(parameters);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        _messageStore!.Clear();

        if (_metadataChoices != null && !_metadataChoices.Any(x => x.Value == _fieldDefinition!.Metadata))
        {
            _messageStore!.Add(new FieldIdentifier(_fieldDefinition!, nameof(_fieldDefinition.Metadata)), SL["EditFieldDefinition.InvalidMetadata", _metadataLabel]);
        }
    }

    private void HandleValidSubmit()
    {
        FieldDefinition.CopyFrom(_fieldDefinition!);
        FieldDefinitionChanged.InvokeAsync(FieldDefinition);
    }

    private async Task HandleTypeChanged(ChangeEventArgs e)
    {
        _fieldDefinition!.Type = FieldType.FromJson(e.Value!.ToString()!);


        var metadataService = ServiceProvider
            .GetKeyedService<IFieldTypeMetadataProvider>(_fieldDefinition.Type.GetType().Name);

        if (metadataService != null)
        {
            _metadataChoices = await metadataService.GetValues(_fieldDefinition.Type);
            _metadataLabel = metadataService.GetMetadataDisplayName(_fieldDefinition.Type).ToString()!;
        }
        else
        {
            _metadataChoices = null;
            _metadataLabel = "";
        }

    }

    public void Dispose()
    {
        _editContext!.OnValidationRequested += HandleValidationRequested;
    }
}
