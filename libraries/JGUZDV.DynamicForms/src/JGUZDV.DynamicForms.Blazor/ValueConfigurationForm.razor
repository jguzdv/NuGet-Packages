@using JGUZDV.Blazor.Components.Modals
@using JGUZDV.DynamicForms.Blazor.ChoicOptionComponents
@using JGUZDV.DynamicForms.Blazor.ConstraintComponents
@using JGUZDV.DynamicForms.Model

<div class="d-flex btn-group pb-3" role="group">
    <button type="button"
    class="col-6 btn @(!_isChoiceOptionMode ? "btn-primary" : "btn-outline-primary")"
    disabled="@(!_isChoiceOptionMode)"
    @onclick="HandleValueSwitch">
        @SL["Werte einschränken"]
    </button>
    <button type="button"
    class="col-6 btn @(_isChoiceOptionMode ? "btn-primary" : "btn-outline-primary")"
    disabled="@(_isChoiceOptionMode)"
    @onclick="HandleValueSwitch">
        @SL["Werte vorgeben"]
    </button>
</div>


@if (!_isChoiceOptionMode)
{
    <EditForm @ref="_editForm" Model="_fieldDefinition" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h3 class="h5">@SL["Einschränkung hinzufügen"]</h3>
        <EditConstraints @bind-FieldDefinition="_fieldDefinition"
        @bind-FieldDefinition:after="() => {}">
        </EditConstraints>
        <ValidationSummary />
        <hr />
        <button class="my-2 btn btn-primary" type="submit">
            @SL["ValueConfigurationForm.Ok"]
        </button>
    </EditForm>
}
else
{
    <EditForm @ref="_editForm" Model="_fieldDefinition" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <EditChoiceOptions @bind-Field="_fieldDefinition"
        @bind-Field:after="() => {}">
        </EditChoiceOptions>
        <ValidationSummary />
        <hr />
        <button class="my-2 btn btn-primary" type="submit">
            @SL["ValueConfigurationForm.Ok"]
        </button>
    </EditForm>
}



<ModalConfirmation @ref="@_confirmationModal"
AcceptText="Yes"
DenyText="No"></ModalConfirmation>

@code {
    private bool _isChoiceOptionMode;
    private EditForm? _editForm;

    private ModalConfirmation? _confirmationModal;

    private FieldDefinition? _fieldDefinition;

    [Parameter]
    public required FieldDefinition FieldDefinition { get; set; }

    [Parameter]
    public EventCallback<FieldDefinition> FieldDefinitionChanged { get; set; }

    [Inject]
    public required IStringLocalizer<Resources.ComponentStrings> SL { get; set; }

    protected override void OnParametersSet()
    {
        _fieldDefinition = FieldDefinition.Copy();
        if (_fieldDefinition.ChoiceOptions.Any())
        {
            _isChoiceOptionMode = true;
        }
        else if (_fieldDefinition.Constraints.Any())
        {
            _isChoiceOptionMode = false;
        }
    }

    private void Submit()
    {
        FieldDefinition.CopyFrom(_fieldDefinition!);
        FieldDefinitionChanged.InvokeAsync(FieldDefinition);
    }

    private async Task HandleValueSwitch()
    {
        var modal = await _confirmationModal!.ShowModal(SL["ValueConfigurationForm.ConfirmSwitch"]);

        if (modal != ModalResult.Accepted)
            return;

        if (_isChoiceOptionMode)
        {
            _fieldDefinition?.ChoiceOptions.Clear();
        }
        else
        {
            _fieldDefinition?.Constraints.Clear();
        }

        _editForm?.EditContext?.NotifyValidationStateChanged();

        _isChoiceOptionMode = !_isChoiceOptionMode;
    }
    }
