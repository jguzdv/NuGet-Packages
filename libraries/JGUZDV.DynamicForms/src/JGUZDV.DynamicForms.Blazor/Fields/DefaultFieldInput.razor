@using JGUZDV.Blazor.Components.Inputs
@using JGUZDV.DynamicForms.Blazor.Resources
@using JGUZDV.DynamicForms.Model
@using JGUZDV.Blazor.Components
@using System.Collections
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.DependencyInjection

@*TODO: Check if EditForm is a good idea HERE to show validation errors*@
<EditForm Model="Field">
    <ValidationSummary />
    @foreach (var item in _validationErrors)
    {
        <div class="text-danger">
            @SL[item.ErrorMessage!]
        </div>
    }
    <div>
        <label for="@InputDefinition.Id">@InputDefinition.Label</label>
        <Await Task="_initTask">
            @if (Field.FieldDefinition.ChoiceOptions?.Any() == true)
            {
                if (Field.FieldDefinition.IsList)
                {
                    <MultiSelect UseSingleSelectionMode="@false"
                                 Items="@Field.FieldDefinition.ChoiceOptions"
                                 ItemName="x => x.Name.ToString()"
                                 ItemKey="x => x.Value"
                                 Title="@InputDefinition.Label.ToString()"
                                 Values="@(Field.Values?.Select(x => GetChoiceOption(x)).ToList())"
                                 ValuesChanged="(value) => SetValue(value.Select(x => ConvertToValue(x.Value)))"
                                 TKey="string"
                                 T="ChoiceOption"></MultiSelect>
                }
                else
                {
                    <MultiSelect UseSingleSelectionMode="@true"
                                 Items="@Field.FieldDefinition.ChoiceOptions"
                                 ItemName="x => x.Name.ToString()"
                                 ItemKey="x => x?.Value"
                                 Title="@InputDefinition.Label.ToString()"
                                 Value="@GetChoiceOption(Field.Value)"
                                 ValueChanged="(value) => SetValue(ConvertToValue(value.Value))"
                                 TKey="string"
                                 T="ChoiceOption"></MultiSelect>
                }

            }
            else
            {
                @if (Field.FieldDefinition.IsList)
                {
                    <div class="input-group">
                        <input type="@Field.FieldDefinition.Type!.InputType"
                               @bind="_inputValue"
                               @onkeyup="HandleKeyUp"
                               class="form-control">
                        <button class="btn btn-outline-secondary" type="button">@Icons.Add(null)</button>
                    </div>

                    <div class="my-1 p-2 border">
                        @if (Field.Values.Any())
                        {
                            @foreach (var value in Field.Values!)
                            {
                                <span class="d-inline-block border mx-1 p-2">
                                    <span>
                                        @GetValueString(value)
                                    </span>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="@(() =>
                                    {
                                        ((IList)Field.Value!).Remove(value);
                                        SetValue(Field.Value);
                                    })">
                                        @Icons.Remove(null)
                                    </button>
                                </span>
                            }
                        }
                        else
                        {
                            @SL["FieldInput.NoValues"]
                        }
                    </div>

                }
                else
                {
                    <input class="form-control"
                           @bind-value="_inputValue"
                           @bind-value:after="() => OnInputChanged(_inputValue)"
                           @onkeyup="HandleKeyUp"
                           type="@Field.FieldDefinition.Type!.InputType" name="@InputDefinition.Name" id="@InputDefinition.Id" />
                }
            }
        </Await>
    </div>

</EditForm>


@code {
    [Parameter]
    [EditorRequired]
    public required Field Field { get; set; }

    [Parameter]
    public EventCallback<Field> FieldChanged { get; set; }

    [Inject]
    public required IServiceProvider ServiceProvider { get; set; }

    [Inject]
    public required IStringLocalizer<ComponentStrings> SL { get; set; }

    private InputDefinition InputDefinition => Field.FieldDefinition.InputDefinition;

    private string? _inputValue;
    private List<ValidationResult> _validationErrors = new();

    private Task? _initTask;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }


    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue(nameof(Field), out Field? field))
        {
            if (field == Field)
            {
                return;
            }
            else
            {
                await base.SetParametersAsync(parameters);
                _initTask = Init();
            }
        }
    }

    private async Task Init()
    {
        var valueProvider = ServiceProvider.GetKeyedService<IFieldTypeValueProvider>(Field.ValueType!.GetType().Name);
        if (valueProvider is not null)
        {
            var values = await valueProvider.GetValues(Field.ValueType, Field.FieldDefinition.Metadata);
            Field.FieldDefinition.ChoiceOptions = values;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!Field.FieldDefinition.IsList)
        {
            _inputValue = GetValueString(Field.Value);
        }

        await base.OnParametersSetAsync();
    }


    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OnInputChanged(_inputValue);
            _inputValue = null;
        }
    }

    private void OnInputChanged(string? value)
    {
        try
        {
            _validationErrors.Clear();

            if (Field.FieldDefinition.IsList)
            {
                var stringValue = ConvertToValue(value?.ToString());
                ((IList)Field.Value!).Add(stringValue);
                SetValue(Field.Value);
            }
            else
            {
                SetValue(ConvertToValue(value?.ToString()));
            }
        }
        catch
        {
            SetValue(null);
            _validationErrors.Add(new ValidationResult($"FieldInput.Validation.Convert"));
        }
    }

    private void SetValue(object? value)
    {
        Field.Value = value;

        FieldChanged.InvokeAsync(Field);
    }


    private string? GetValueString(object? value) => value == null
        ? null
        : Field.ValueType.ConvertFromValue(value);

    private ChoiceOption? GetChoiceOption(object? value)
    {
        return value == null
            ? null
            : Field.FieldDefinition.ChoiceOptions.FirstOrDefault(x => x.Value == Field.ValueType.ConvertFromValue(value));
    }

    private object? ConvertToValue(string? value)
    {
        return value == null
            ? null
            : Field.ValueType.ConvertToValue(value);
    }


}