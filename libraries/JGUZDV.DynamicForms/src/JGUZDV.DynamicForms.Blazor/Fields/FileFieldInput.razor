@using JGUZDV.DynamicForms.Model
@using JGUZDV.DynamicForms.Blazor.Services
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager Navigation


<EditForm Model="Field">
    <div class="mb-3">
        <label for="fileUpload" class="form-label">Upload Files</label>
        <InputFile class="form-control" id="fileUpload" OnChange="OnFilesSelected" multiple="@Field.FieldDefinition.IsList" />
    </div>

    @if (_failedUploads.Any())
    {
        <div class="text-danger" role="alert">
            <p>Failed to upload the following files:</p>
            <ul>
                @foreach (var file in _failedUploads)
                {
                    <li>@file</li>
                }
            </ul>
        </div>
    }

</EditForm>

@code {
    [Parameter]
    [EditorRequired]
    public required Field Field { get; set; }

    [Parameter]
    public EventCallback<Field> FieldChanged { get; set; }

    [Inject]
    public required IFileService FileService { get; set; }

    private string fileIdentifier = string.Empty;
    private List<IBrowserFile> selectedFiles = new();

    private List<string> _failedUploads = [];

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        selectedFiles = Field.FieldDefinition.IsList
            ? e.GetMultipleFiles().ToList()
            : [e.File];

        await UploadFiles();
    }

    private async Task UploadFiles()
    {
        _failedUploads.Clear();

        var valueList = new List<FileFieldType.FileType>();

        if (!selectedFiles.Any())
        {
            return;
        }

        foreach (var file in selectedFiles)
        {
            var val = new FileFieldType.FileType()
            {
                FileName = file.Name,
                FileSize = file.Size,
            };

            valueList.Add(val);

            try
            {
                var stream = file.OpenReadStream(file.Size);
                await FileService.UploadFile(stream, file.Name, Field.FieldDefinition.Identifier);
            }
            catch (Exception e)
            {
                _failedUploads.Add(file.Name);
            }
        }

        // Update the field value
        Field.Value = Field.FieldDefinition.IsList
            ? valueList
            : valueList.First();

        _ = FieldChanged.InvokeAsync(Field);
    }
}
