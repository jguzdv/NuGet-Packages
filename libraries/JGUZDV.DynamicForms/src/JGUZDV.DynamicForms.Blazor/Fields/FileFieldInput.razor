@using JGUZDV.DynamicForms.Blazor.Resources
@using JGUZDV.DynamicForms.Model
@using JGUZDV.DynamicForms.Blazor.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging

<EditForm Model="Field">
    <div class="">
        <label for="fileUpload" class="form-label">@Field.FieldDefinition.InputDefinition.Label</label>
        <InputFile class="form-control"
        id="@Field.FieldDefinition.InputDefinition.Id"
        OnChange="OnFilesSelected"
        multiple="@Field.FieldDefinition.IsList" />
    </div>

    @if (_errors.Any())
    {
        <div class="text-danger mt-2" role="alert">
            <span>@SL["FileFieldInput.ValidationResults"]</span>
            <ul>
                @foreach (var file in _errors)
                {
                    <li>@file</li>
                }
            </ul>
        </div>
    }

</EditForm>

@code {
    [Parameter]
    [EditorRequired]
    public required Field Field { get; set; }

    [Parameter]
    public EventCallback<Field> FieldChanged { get; set; }

    [Inject]
    public required IFileService FileService { get; set; }

    [Inject]
    public required IServiceProvider ServiceProvider { get; set; }

    [Inject]
    public required IStringLocalizer<ComponentStrings> SL { get; set; }

    [Inject]
    public required ILogger<FileFieldInput> Logger { get; set; }

    private List<IBrowserFile> selectedFiles = new();
    private List<string> _errors = [];

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        selectedFiles = Field.FieldDefinition.IsList
            ? e.GetMultipleFiles().ToList()
            : [e.File];

        await UploadFiles();
    }

    private async Task UploadFiles()
    {
        _errors.Clear();

        var valueList = new List<FileFieldType.FileType>();

        if (!selectedFiles.Any())
        {
            return;
        }

        List<object> vals = [
            selectedFiles.Select(x => new FileFieldType.FileType
                {
                    FileName = x.Name,
                    FileSize = x.Size
                })
        ];
        _errors = Field.FieldDefinition.Constraints
                .SelectMany(x =>
                    x.ValidateConstraint(vals,
                    new(Field, ServiceProvider, null)))
                .Select(x => x.ErrorMessage!)
                .ToList();

        if (_errors.Any())
        {
            return;
        }

        foreach (var file in selectedFiles)
        {
            var val = new FileFieldType.FileType()
                {
                    FileName = file.Name,
                    FileSize = file.Size,
                };

            valueList.Add(val);

            try
            {
                var stream = file.OpenReadStream(file.Size);
                await FileService.UploadFile(stream, file.Name, Field.FieldDefinition.Identifier);
            }
            catch (Exception e)
            {
                Logger.LogError(e, SL["FileFieldInput.UploadError", file.Name]);
                _errors.Add(SL["FileFieldInput.UploadError", file.Name]);
            }
        }

        // Update the field value
        Field.Value = Field.FieldDefinition.IsList
            ? valueList
            : valueList.First();

        _ = FieldChanged.InvokeAsync(Field);
    }
}
